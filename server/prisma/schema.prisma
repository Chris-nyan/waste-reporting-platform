generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================================
// CORE MULTI-TENANCY MODEL
// =======================================
model Tenant {
  id                    String    @id @default(cuid())
  companyName           String
  logoUrl               String?
  primaryColor          String?   @default("#000000")
  
  // ++ NEW FIELDS FOR SUPER ADMIN MANAGEMENT ++
  status                TenantStatus @default(ACTIVE) // To pause/resume services
  subscriptionExpiresAt DateTime?                    // To track subscription end dates

  users                 User[]
  clients               Client[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  facilities      Facility[]
  pickupLocations PickupLocation[]
  vehicleTypes    VehicleType[]
}

// =======================================
// AUTHENTICATION & USERS
// =======================================
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  
  // ++ ROLE ENUM IS UPDATED ++
  role      Role     @default(MEMBER)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ++ RELATION TO TENANT IS NOW OPTIONAL ++
  // A Super Admin will have a null tenantId
  tenant    Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String?

  createdClients   Client[]
  createdWasteData WasteData[]
  createdReports   Report[]

  @@index([tenantId])
}

// Other models (Client, WasteData, Report) remain the same...

model Client {
  id             String      @id @default(cuid())
  companyName    String
  contactPerson  String?
  email          String?
  phone          String?
  address        String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tenant         Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId       String
  createdBy      User        @relation(fields: [createdById], references: [id])
  createdById    String
  wasteData      WasteData[]
  reports        Report[]
  @@index([tenantId])
}

// Stores individual records of recycled waste for a Client.
model WasteCategory {
  id    String @id @default(cuid())
  name  String @unique
  types WasteType[]
}

model WasteType {
  id          String @id @default(cuid())
  name        String
  category    WasteCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  wasteData   WasteData[]
}

model RecyclingTechnology {
  id        String @id @default(cuid())
  name      String @unique
  wasteData WasteData[]
}


// =======================================
// WasteData MODEL
// =======================================
model WasteData {
  id            String    @id @default(cuid())
  wasteType     WasteType @relation(fields: [wasteTypeId], references: [id])
  wasteTypeId   String
  quantity      Float
  unit          String
  recycledDate  DateTime
  
  recyclingTechnology   RecyclingTechnology? @relation(fields: [recyclingTechnologyId], references: [id])
  recyclingTechnologyId String?
  
  // --- LOGISTICS (UPDATED) ---
  // The old string fields will be replaced by relations
  // pickupAddress    String? // REMOVED
  // facilityAddress  String? // REMOVED
  // vehicleType      String? // REMOVED
  
  pickupLocation   PickupLocation? @relation(fields: [pickupLocationId], references: [id])
  pickupLocationId String?
  facility         Facility?       @relation(fields: [facilityId], references: [id])
  facilityId       String?
  vehicleType      VehicleType?    @relation(fields: [vehicleTypeId], references: [id])
  vehicleTypeId    String?
  
  distanceKm    Float?
  pickupDate    DateTime?
  imageUrl      String[]  @default([])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  client        Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String
  createdBy     User      @relation(fields: [createdById], references: [id])
  createdById   String
  @@index([clientId])
}

model Facility {
  id          String      @id @default(cuid())
  name        String      // e.g., "Main Recycling Plant"
  fullAddress String
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  wasteData   WasteData[]

  @@index([tenantId])
}

model PickupLocation {
  id          String      @id @default(cuid())
  name        String      // e.g., "Client HQ Warehouse"
  fullAddress String
  // This links to the Tenant, not a specific Client, for broader reusability
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  wasteData   WasteData[]

  @@index([tenantId])
}

model VehicleType {
  id        String      @id @default(cuid())
  name      String      // e.g., "10-Ton Scania Truck"
  tenant    Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String
  wasteData WasteData[]

  @@index([tenantId])
}


// =======================================
// REPORTING MODELS
// =======================================

model Report {
  id                  String    @id @default(cuid())
  
  // Configuration from the wizard
  reportTitle         String    @default("Waste Management & Sustainability Report")
  coverImageUrl       String?
  logoUrl             String?
  startDate           DateTime
  endDate             DateTime
  includedWasteTypes  String[]  // Stores an array of the waste types selected for this report
  
  // Stored answers to the comprehensive questions
  questions           ReportQuestion[]

  // --- Stored calculated results ---
  totalWeightRecycled Float
  emissionsAvoided    Float
  logisticsEmissions  Float
  recyclingEmissions  Float
  netImpact           Float

  
  diversionRate         Float?
  totalWasteGenerated   Float?
  carsOffRoadEquivalent Float?
  treesSaved            Float?
  landfillSpaceSaved    Float?
  // --------------------------
  
  generatedAt         DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  client              Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String
  createdBy           User      @relation(fields: [createdById], references: [id])
  createdById         String
  
  @@index([clientId])
}

// Stores the question and answer pairs for each report
model ReportQuestion {
    id          String @id @default(cuid())
    questionText String
    answerText  String
    report      Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
    reportId    String
}


// =======================================
// MASTER DATA MODEL FOR QUESTIONS
// =======================================

model MasterReportQuestion {
  id           String  @id @default(cuid())
  text         String  @unique
  displayOrder Int     @default(0) // To control the order they appear in the form
  isActive     Boolean @default(true) // To allow disabling questions without deleting
}

// =======================================
// ENUMS FOR DATA CONSISTENCY
// =======================================
enum Role {
  SUPER_ADMIN // ++ NEW PLATFORM-LEVEL ROLE ++
  ADMIN       // Tenant-level admin
  MEMBER      // Tenant-level member
}

// ++ NEW ENUM FOR TENANT STATUS ++
enum TenantStatus {
  ACTIVE
  PAUSED
  CANCELED
}

enum WasteUnit {
  KG
  G
  T
  LB
  TONNE  // Keeping this for backward compatibility
  POUNDS // Keeping this for backward compatibility
}